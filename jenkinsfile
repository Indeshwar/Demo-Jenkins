pipeline{
    agent{
        docker{
            //install maven and jdk-11 inside the docker
            image 'maven:3.8.1-adoptopenjdk-11'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock' //Mount the docker socket to access host's Docker daemon
        }
    }

    stages{
        stage('Checkout'){
            steps{
                git branch: 'main', url: 'https://github.com/Indeshwar/demo-java-jenkins'
            }
        }

        stage('Build and Test'){
            steps{
                //You are calling the mvn executable, which means you need Maven installed on your machine.
                //You are using the clean command, which will delete all previously compiled 
                //Java .class files and resources (like .properties) in your project. Your build will start from a clean slate.
                //Install command will then compile, test & package your Java project and even install/copy your built .jar/.war file into your local Maven repository
                
                //build the project and create a jar file
                sh 'mvn clean package'
            }
        }

        stage('Static Code Analysis'){
            environment{
                SONAR_URL = "http://34.173.51.7:9000"
            }

            steps{
                withCredentials([string(credentialsId: 'sonar', variable: 'SONAR_AUTH_TOKEN')]){
                    sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
        }

        stage('Build Docker image'){
            environment{
                dockerImage = ''
                registry = 'indeshwar/java-app'
            }

            steps{
                script {
                    dockerImage = docker.build registry
                }
            }
        }

    }
}